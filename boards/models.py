"""
Standard Django database models
Standard Django user model
Standard Django reverse url module
Cloudinary model to support image repository
"""
from django.db import models
from django.contrib.auth.models import User
from django.urls import reverse
from cloudinary.models import CloudinaryField


class Category(models.Model):
    """
    Model for message post categories
    """

    name = models.CharField(max_length=50)
    category_image = CloudinaryField('image', default='cpic_placeholder')

    class Meta:
        ordering = ['name']

    def __str__(self):
        return self.name


class Post(models.Model):
    """
    Model for message posts
    """

    STATUS = ((0, "Draft"), (1, "Published"))

    title = models.CharField(max_length=200, unique=True)
    slug = models.SlugField(max_length=200, unique=True)
    author = models.ForeignKey(
        User, on_delete=models.CASCADE, related_name="board_posts"
    )
    category = models.ForeignKey(
        Category,
        on_delete=models.CASCADE,
        default="",
        related_name="category_posts"
    )
    created_on = models.DateTimeField(auto_now_add=True)
    updated_on = models.DateTimeField(auto_now=True)
    content = models.TextField()
    post_image = CloudinaryField('image', default='placeholder')
    status = models.IntegerField(choices=STATUS, default=0)
    likes = models.ManyToManyField(User, related_name="post_likes")

    class Meta:
        """
        Orders message post instances in the database by
        date created in descending order.
        """
        ordering = ['-created_on']

    def __str__(self):
        return self.title

    def number_of_likes(self):
        """
        Uses the count method to return the number of likes
        in a message post instance.
        """
        return self.likes.count()

    def get_absolute_url(self):
        """
        Method to tell django how to find the url to any specific
        instance of a post when the Post model is instantiated,
        (i.e. a new post created). Returns the url generated by the
        'boards_post' path from the FullPost class view, with
        this model's slug field as a keyword argument. This
        effectively acts as a redirect to the full_post.html template.
        """

        return reverse('boards_post', kwargs={'slug': self.slug})


class Comment(models.Model):
    """
    Model for comments
    """

    post = models.ForeignKey(
        Post, on_delete=models.CASCADE, related_name='comments'
    )
    name = models.ForeignKey(
        User, on_delete=models.CASCADE, related_name="post_comment"
    )
    body = models.TextField()
    created_on = models.DateTimeField(auto_now_add=True)
    updated_on = models.DateTimeField(auto_now=True)

    class Meta:
        """
        Orders comment instances in the database by
        date created in ascending order.
        """
        ordering = ['created_on']

    def __str__(self):
        return f"{self.name} commented: {self.body}"


class UserProfile(models.Model):
    """
    Model for user profile. Extends standard User model,
    adding a profile image field.
    """

    user = models.OneToOneField(
        User, on_delete=models.CASCADE, related_name='user_profile'
    )
    profile_image = CloudinaryField('image', default='pic_placeholder')

    def __str__(self):
        return f"User Profile: {self.user.username}"
